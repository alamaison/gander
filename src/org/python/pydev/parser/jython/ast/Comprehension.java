// Autogenerated AST node
package org.python.pydev.parser.jython.ast;
import org.python.pydev.parser.jython.SimpleNode;

public final class Comprehension extends comprehensionType {
    public exprType target;
    public exprType iter;
    public exprType[] ifs;

    public Comprehension(exprType target, exprType iter, exprType[] ifs) {
        this.target = target;
        this.iter = iter;
        this.ifs = ifs;
    }

    public Comprehension(exprType target, exprType iter, exprType[] ifs, SimpleNode parent) {
        this(target, iter, ifs);
        this.beginLine = parent.beginLine;
        this.beginColumn = parent.beginColumn;
    }

    public Comprehension createCopy() {
        exprType[] new0;
        if(this.ifs != null){
        new0 = new exprType[this.ifs.length];
        for(int i=0;i<this.ifs.length;i++){
            new0[i] = (exprType) (this.ifs[i] != null? this.ifs[i].createCopy():null);
        }
        }else{
            new0 = this.ifs;
        }
        Comprehension temp = new Comprehension(target!=null?(exprType)target.createCopy():null,
        iter!=null?(exprType)iter.createCopy():null, new0);
        temp.beginLine = this.beginLine;
        temp.beginColumn = this.beginColumn;
        if(this.specialsBefore != null){
            for(Object o:this.specialsBefore){
                if(o instanceof commentType){
                    commentType commentType = (commentType) o;
                    temp.getSpecialsBefore().add(commentType.createCopy());
                }
            }
        }
        if(this.specialsAfter != null){
            for(Object o:this.specialsAfter){
                if(o instanceof commentType){
                    commentType commentType = (commentType) o;
                    temp.getSpecialsAfter().add(commentType.createCopy());
                }
            }
        }
        return temp;
    }

    public String toString() {
        StringBuffer sb = new StringBuffer("Comprehension[");
        sb.append("target=");
        sb.append(dumpThis(this.target));
        sb.append(", ");
        sb.append("iter=");
        sb.append(dumpThis(this.iter));
        sb.append(", ");
        sb.append("ifs=");
        sb.append(dumpThis(this.ifs));
        sb.append("]");
        return sb.toString();
    }

    public Object accept(VisitorIF visitor) throws Exception {
        return visitor.visitComprehension(this);
    }

    public void traverse(VisitorIF visitor) throws Exception {
        if (target != null){
            target.accept(visitor);
        }
        if (iter != null){
            iter.accept(visitor);
        }
        if (ifs != null) {
            for (int i = 0; i < ifs.length; i++) {
                if (ifs[i] != null){
                    ifs[i].accept(visitor);
                }
            }
        }
    }

}
