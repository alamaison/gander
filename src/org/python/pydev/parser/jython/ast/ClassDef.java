// Autogenerated AST node
package org.python.pydev.parser.jython.ast;
import org.python.pydev.parser.jython.SimpleNode;

public final class ClassDef extends stmtType {
    public NameTokType name;
    public exprType[] bases;
    public stmtType[] body;
    public decoratorsType[] decs;
    public keywordType[] keywords;
    public exprType starargs;
    public exprType kwargs;

    public ClassDef(NameTokType name, exprType[] bases, stmtType[] body, decoratorsType[] decs,
    keywordType[] keywords, exprType starargs, exprType kwargs) {
        this.name = name;
        this.bases = bases;
        this.body = body;
        this.decs = decs;
        this.keywords = keywords;
        this.starargs = starargs;
        this.kwargs = kwargs;
    }

    public ClassDef(NameTokType name, exprType[] bases, stmtType[] body, decoratorsType[] decs,
    keywordType[] keywords, exprType starargs, exprType kwargs, SimpleNode parent) {
        this(name, bases, body, decs, keywords, starargs, kwargs);
        this.beginLine = parent.beginLine;
        this.beginColumn = parent.beginColumn;
    }

    public ClassDef createCopy() {
        exprType[] new0;
        if(this.bases != null){
        new0 = new exprType[this.bases.length];
        for(int i=0;i<this.bases.length;i++){
            new0[i] = (exprType) (this.bases[i] != null? this.bases[i].createCopy():null);
        }
        }else{
            new0 = this.bases;
        }
        stmtType[] new1;
        if(this.body != null){
        new1 = new stmtType[this.body.length];
        for(int i=0;i<this.body.length;i++){
            new1[i] = (stmtType) (this.body[i] != null? this.body[i].createCopy():null);
        }
        }else{
            new1 = this.body;
        }
        decoratorsType[] new2;
        if(this.decs != null){
        new2 = new decoratorsType[this.decs.length];
        for(int i=0;i<this.decs.length;i++){
            new2[i] = (decoratorsType) (this.decs[i] != null? this.decs[i].createCopy():null);
        }
        }else{
            new2 = this.decs;
        }
        keywordType[] new3;
        if(this.keywords != null){
        new3 = new keywordType[this.keywords.length];
        for(int i=0;i<this.keywords.length;i++){
            new3[i] = (keywordType) (this.keywords[i] != null? this.keywords[i].createCopy():null);
        }
        }else{
            new3 = this.keywords;
        }
        ClassDef temp = new ClassDef(name!=null?(NameTokType)name.createCopy():null, new0, new1,
        new2, new3, starargs!=null?(exprType)starargs.createCopy():null,
        kwargs!=null?(exprType)kwargs.createCopy():null);
        temp.beginLine = this.beginLine;
        temp.beginColumn = this.beginColumn;
        if(this.specialsBefore != null){
            for(Object o:this.specialsBefore){
                if(o instanceof commentType){
                    commentType commentType = (commentType) o;
                    temp.getSpecialsBefore().add(commentType.createCopy());
                }
            }
        }
        if(this.specialsAfter != null){
            for(Object o:this.specialsAfter){
                if(o instanceof commentType){
                    commentType commentType = (commentType) o;
                    temp.getSpecialsAfter().add(commentType.createCopy());
                }
            }
        }
        return temp;
    }

    public String toString() {
        StringBuffer sb = new StringBuffer("ClassDef[");
        sb.append("name=");
        sb.append(dumpThis(this.name));
        sb.append(", ");
        sb.append("bases=");
        sb.append(dumpThis(this.bases));
        sb.append(", ");
        sb.append("body=");
        sb.append(dumpThis(this.body));
        sb.append(", ");
        sb.append("decs=");
        sb.append(dumpThis(this.decs));
        sb.append(", ");
        sb.append("keywords=");
        sb.append(dumpThis(this.keywords));
        sb.append(", ");
        sb.append("starargs=");
        sb.append(dumpThis(this.starargs));
        sb.append(", ");
        sb.append("kwargs=");
        sb.append(dumpThis(this.kwargs));
        sb.append("]");
        return sb.toString();
    }

    public Object accept(VisitorIF visitor) throws Exception {
        return visitor.visitClassDef(this);
    }

    public void traverse(VisitorIF visitor) throws Exception {
        if (name != null){
            name.accept(visitor);
        }
        if (bases != null) {
            for (int i = 0; i < bases.length; i++) {
                if (bases[i] != null){
                    bases[i].accept(visitor);
                }
            }
        }
        if (body != null) {
            for (int i = 0; i < body.length; i++) {
                if (body[i] != null){
                    body[i].accept(visitor);
                }
            }
        }
        if (decs != null) {
            for (int i = 0; i < decs.length; i++) {
                if (decs[i] != null){
                    decs[i].accept(visitor);
                }
            }
        }
        if (keywords != null) {
            for (int i = 0; i < keywords.length; i++) {
                if (keywords[i] != null){
                    keywords[i].accept(visitor);
                }
            }
        }
        if (starargs != null){
            starargs.accept(visitor);
        }
        if (kwargs != null){
            kwargs.accept(visitor);
        }
    }

}
